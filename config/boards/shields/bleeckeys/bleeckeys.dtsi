#include <dt-bindings/zmk/matrix_transform.h> // Put this with the other includes at the top of your dtsi
#include "bleeckeys-layouts.dtsi" 
#include <dt-bindings/zmk/input_transform.h>
// to use gestures this is always necessary:
#include <behaviors/input_processor_gestures.dtsi>

// to translate absolute positions to relative positions. If you don't
// want to use gestures for absolute mode, and you don't want to activate it,
// you can ignore this line
// &zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)


#include <behaviors/input_processor_absolute_to_relative.dtsi>


/ {
    chosen {
        zephyr,display = &oled;
        zmk,physical-layout = &physical_layout0;
        // Other chosen items
    };

    kscan0: kscan0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

        row-gpios
            = <&pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 8 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 9 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;

    };

    default_transform: keymap_transform0 {
        compatible = "zmk,matrix-transform";
        columns = <12>;
        rows = <6>;
        map = <
RC(0,0) RC(0,1) RC(0,2) RC(0,3)                                        RC(0,8) RC(0,9) RC(0,10) RC(0,11)
RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4) RC(1,5)        RC(1,6) RC(1,7) RC(1,8) RC(1,9) RC(1,10) RC(1,11)
RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(2,5)        RC(2,6) RC(2,7) RC(2,8) RC(2,9) RC(2,10) RC(2,11)
RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4) RC(3,5)        RC(3,6) RC(3,7) RC(3,8) RC(3,9) RC(3,10) RC(3,11)
                RC(4,2) RC(4,3) RC(4,4) RC(4,5)                RC(4,7) RC(4,8) RC(4,9) 
        RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5)                RC(5,11) RC(5,10) RC(5,9) RC(5,8) RC(5,7)
      >;
    };


    left_encoder: encoder_left {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <30>;
        status = "okay";
    };

    sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder>;
        triggers-per-rotation = <30>;
    };
    
/*    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        glidepoint_split: glidepoint_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
        };
    };

    glidepoint_listener: glidepoint_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&glidepoint_split>;
    };
*/
};

&pro_micro_i2c {
    status = "okay";

    oled: ssd1306@3c {
        compatible = "solomon,ssd1306fb";
        reg = <0x3c>;
        width = <128>;
        height = <32>;
        segment-offset = <0>;
        page-offset = <0>;
        display-offset = <0>;
        multiplex-ratio = <31>;
        segment-remap;
        com-invdir;
        com-sequential;
        inversion-on;
        prechargep = <0x22>;
    };
};

//&zip_gestures {
//    tap-detection;
//    prevent_movement_during_tap;
//    //inertial-cursor;
//    //circular-scroll;
//    //circular-scroll-rim-percent=<15>;
//};

/ {
    split_inputs {
        #address-cells = <1>;
        #size-cells = <0>;

        glidepoint_split: glidepoint_split@0 {
            compatible = "zmk,input-split";
            reg = <0>;
        };
    };

    glidepoint_listener: glidepoint_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
        device = <&glidepoint_split>;
        input-processors = <
            // &zip_gestures
            &zip_absolute_to_relative
            &zip_scroll_scaler 4 2
            >;
//        scroller {
//            layers = <5>;
//            input-processors = <
//                &zip_xy_scaler 1 20
//                &zip_xy_to_scroll_mapper
//            >;
//        };
    };
};

//                &zip_xy_transform (INPUT_TRANSFORM_XY_SWAP | INPUT_TRANSFORM_X_INVERT)
